@page "/cross-links"
@inject AppStateService AppState
@inject CombinedCrossDocLinkService CombinedLinkService
@implements IDisposable
@using RagWebScraper.Models
@using System.Linq
@using RagWebScraper.Shared
@using RagWebScraper.Services


<h3 class="mb-3 text-primary">Cross-Document Links</h3>

@if (_isLoading)
{
    <p>
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Generating links...
    </p>
}
else if (!AppState.AllCrossDocLinks.Any() &&
         !AppState.PdfCrossDocLinks.Any() &&
         !AppState.UrlCrossDocLinks.Any())
{
    <p>No cross-document links available. Please analyze some documents first.</p>
}
else
{
    if (AppState.AllCrossDocLinks.Any())
    {
        <h4 class="mt-3">All Documents</h4>
        <CrossDocLinks Links="AppState.AllCrossDocLinks" />
    }

    if (AppState.UrlCrossDocLinks.Any())
    {
        <h4 class="mt-3">Web Page Links</h4>
        <CrossDocLinks Links="AppState.UrlCrossDocLinks" />
    }

    if (AppState.PdfCrossDocLinks.Any())
    {
        <h4 class="mt-3">PDF Links</h4>
        <CrossDocLinks Links="AppState.PdfCrossDocLinks" />
    }
}

@code {
    private bool _isLoading = true;

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GenerateLinksAsync();
        }
    }

    private async Task GenerateLinksAsync()
    {
        var links = await CombinedLinkService.ComputeLinksAsync(
            AppState.UrlAnalysisResults,
            AppState.PdfAnalysisResults);
        AppState.SetAllCrossDocLinks(links);
        _isLoading = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
