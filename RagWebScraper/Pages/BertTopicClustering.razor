@page "/cluster"
@inject IDocumentClusterer Clusterer
@inject AppStateService AppState
@inject ITextExtractor TextExtractor
@using RagWebScraper.Models
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq

@implements IDisposable

<h3 class="mb-3 text-primary">BERTopic Document Clustering</h3>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label fw-bold">Upload documents:</label>
            <InputFile OnChange="HandleFileUpload" multiple accept=".txt,.pdf" />
            @if (selectedFileNames.Any())
            {
                <ul class="mt-2">
                    @foreach (var name in selectedFileNames)
                    {
                        <li>@name</li>
                    }
                </ul>
            }
        </div>
        <div class="form-check mb-2">
            <input class="form-check-input" type="checkbox" id="includeUrlDocs" @bind="includeUrlDocs" />
            <label class="form-check-label" for="includeUrlDocs">
                Include analyzed URLs
            </label>
        </div>
        <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="includePdfDocs" @bind="includePdfDocs" />
            <label class="form-check-label" for="includePdfDocs">
                Include analyzed PDFs
            </label>
        </div>
        <div class="mb-3">
            <label class="form-label fw-bold">Number of clusters:</label>
            <InputNumber class="form-control" @bind-Value="clusterCount" Min="2" />
        </div>
        <button class="btn btn-primary" @onclick="ClusterDocs">Cluster</button>
        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-info mt-2">@errorMessage</div>
        }
    </div>
</div>

@if (clusterResult?.Clusters.Any() == true)
{
    <h4 class="text-success">Results</h4>
    <ClusterChart Results="clusterResult.Clusters" />

    <div class="mb-3">
        <h5>Metrics</h5>
        <ul>
            <li>Average Distance: @clusterResult.Metrics.AverageDistance</li>
            <li>Davies-Bouldin Index: @clusterResult.Metrics.DaviesBouldinIndex</li>
            <li>Normalized Mutual Information: @clusterResult.Metrics.NormalizedMutualInformation</li>
        </ul>
    </div>

    @foreach (var group in clusterResult.Clusters.GroupBy(r => r.Value))
    {
        var descriptor = clusterResult.Descriptors.FirstOrDefault(d => d.ClusterId == group.Key);
        <div class="mb-3">
            <h5>Cluster @group.Key</h5>
            @if (descriptor is not null)
            {
                <p><strong>Reason:</strong> @descriptor.Reason</p>
                <p><strong>Top Words:</strong> @string.Join(", ", descriptor.TopWords)</p>
            }
            <ul>
                @foreach (var doc in group)
                {
                    <li>@(docLabels.TryGetValue(doc.Key, out var label) ? label : doc.Key.ToString())</li>
                }
            </ul>
        </div>
    }
}

@code {
    private int clusterCount = 3;
    private DocumentClusteringResult? clusterResult;
    private string? errorMessage;
    private readonly Dictionary<Guid, string> docLabels = new();
    private List<IBrowserFile> selectedFiles = new();
    private List<string> selectedFileNames = new();
    private bool includeUrlDocs = true;
    private bool includePdfDocs = true;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles().ToList();
        selectedFileNames = selectedFiles.Select(f => f.Name).ToList();
    }

    private async Task<List<Document>> GetDocumentsAsync()
    {
        var docs = new List<Document>();
        docLabels.Clear();

        // from uploaded files
        foreach (var file in selectedFiles)
        {
            using var stream = file.OpenReadStream(10_485_760); // 10MB
            string text;
            if (file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                text = await TextExtractor.ExtractTextAsync(stream);
            }
            else
            {
                using var reader = new StreamReader(stream);
                text = await reader.ReadToEndAsync();
            }
            var id = Guid.NewGuid();
            docLabels[id] = $"File: {file.Name}";
            docs.Add(new Document(id, text));
        }

        // include URL results
        if (includeUrlDocs && AppState.UrlAnalysisResults.Any())
        {
            foreach (var res in AppState.UrlAnalysisResults)
            {
                var id = Guid.NewGuid();
                docLabels[id] = $"URL: {res.Url}";
                docs.Add(new Document(id, res.RawText));
            }
        }

        // include PDF results
        if (includePdfDocs && AppState.PdfAnalysisResults.Any())
        {
            foreach (var res in AppState.PdfAnalysisResults)
            {
                var id = Guid.NewGuid();
                docLabels[id] = $"PDF: {res.FileName}";
                docs.Add(new Document(id, res.RawText));
            }
        }

        return docs;
    }

    private async Task ClusterDocs()
    {
        var documents = await GetDocumentsAsync();

        if (documents.Count == 0)
        {
            clusterResult = null;
            errorMessage = null;
            return;
        }
        try
        {
            clusterResult = await Clusterer.ClusterAsync(documents, clusterCount);
            errorMessage = null;
        }
        catch (InvalidOperationException ex)
        {
            clusterResult = null;
            errorMessage = ex.Message;
        }
    }

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
