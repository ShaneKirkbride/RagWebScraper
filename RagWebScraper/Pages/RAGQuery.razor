@page "/query"
@using RagWebScraper.Models
@using RagWebScraper.Services
@using static System.Net.WebRequestMethods
@inject IEmbeddingService EmbeddingService
@inject IVectorStoreService VectorStoreService
@inject HttpClient Http
@inject NavigationManager Navigation

<h2 class="mb-4 text-primary">Query RAG Knowledge Base</h2>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label fw-bold">Enter your query:</label>
            <input type="text" class="form-control" @bind="userQuery" placeholder="Ask a question..." />
        </div>
        <button class="btn btn-success" @onclick="QueryRagAsync">
            <i class="bi bi-search"></i> Query RAG
        </button>
    </div>
</div>

@if (queryResponse?.Results != null && queryResponse.Results.Any())
{
    <h4>Top Retrieved Chunks:</h4>
    @foreach (var result in queryResponse.Results)
    {
        <div class="card mb-2">
            <div class="card-body">
                <div class="text-wrap" style="white-space: pre-wrap;">@result.ChunkText</div>
                @if (!string.IsNullOrEmpty(result.Source))
                {
                    <div class="mt-2"><strong>Source:</strong> @result.Source</div>
                }
            </div>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(queryResponse.Commentary))
    {
        <h4>AI Commentary:</h4>
        <div class="card mb-2">
            <div class="card-body">
                <div class="text-wrap" style="white-space: pre-wrap;">@queryResponse.Commentary</div>
            </div>
        </div>
    }
}


@code {
    private string? userQuery;
    private RAGQueryResponse? queryResponse;

    private async Task QueryRagAsync()
    {
        if (string.IsNullOrWhiteSpace(userQuery))
            return;

        try
        {
            var request = new RAGQueryRequest { Query = userQuery };
            var apiUrl = Navigation.BaseUri + "api/rag/query";
            var response = await Http.PostAsJsonAsync(apiUrl, request);

            if (!response.IsSuccessStatusCode)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error from API: {response.StatusCode} - {errorContent}");
                queryResponse = new RAGQueryResponse
                {
                    Results = new List<RAGQueryResult>
                    {
                        new() { ChunkText = $"Error: {response.StatusCode} - {errorContent}" }
                    }
                };
                return;
            }

            queryResponse = await response.Content.ReadFromJsonAsync<RAGQueryResponse>();
        }
        catch (Exception ex)
        {
            queryResponse = new RAGQueryResponse
            {
                Results = new List<RAGQueryResult>
                {
                    new() { ChunkText = $"Error querying RAG: {ex.Message}" }
                }
            };
        }
    }
}

