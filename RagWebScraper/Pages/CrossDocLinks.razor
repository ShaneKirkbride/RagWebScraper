@using RagWebScraper.Models
@using System.Text
@inject ICsvExportService CsvExporter
@inject IJSRuntime JS

@code {
    [Parameter]
    public IEnumerable<LinkedPassage> Links { get; set; } = Enumerable.Empty<LinkedPassage>();

    [Parameter]
    public bool Display { get; set; } = true;

    [Parameter]
    public bool AllowDownload { get; set; } = true;

    private async Task DownloadAsync()
    {
        var baseName = await JS.InvokeAsync<string>("prompt", "Enter file name for cross links CSV", "cross_links");
        if (string.IsNullOrWhiteSpace(baseName))
            baseName = "cross_links";
        var fileName = $"{baseName}_{DateTime.Now:ddMMyyyyHHmmss}.csv";
        var bytes = CsvExporter.ExportCrossLinks(Links);
        var content = Encoding.UTF8.GetString(bytes);
        await JS.InvokeVoidAsync("downloadFile", fileName, content);
    }
}

@if (Display)
{
    if (!Links.Any())
    {
        <p>No cross-document links found.</p>
    }
    else
    {
        @if (AllowDownload)
        {
            <button class="btn btn-sm btn-secondary mb-2" @onclick="DownloadAsync">
                <i class="bi bi-download"></i> Download CSV
            </button>
        }
        <div class="list-group">
            @foreach (var link in Links)
            {
                <div class="list-group-item">
                    <strong>@link.SourceIdA</strong>: @TextUtils.Truncate(link.TextA, 300)
                    <br />
                    <strong>@link.SourceIdB</strong>: @TextUtils.Truncate(link.TextB, 300)
                    <br />
                    <span class="badge bg-secondary">Similarity: @($"{link.Similarity:P1}")</span>
                </div>
            }
        </div>
    }
}

