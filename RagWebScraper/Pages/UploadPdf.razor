@page "/upload-pdf"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AppStateService AppState
@inject IRagAnalyzerService RagAnalyzer
@inject TextChunker Chunker
@inject CombinedCrossDocLinkService CombinedLinkService
@inject KeywordSentimentSummaryService SummaryService

@implements IDisposable
@using System.Timers
@using RagWebScraper.Models
@using RagWebScraper.Services
@using RagWebScraper.Shared
@using Microsoft.AspNetCore.Components.Forms

<h3 class="mb-3 text-primary">Upload and Analyze PDFs</h3>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label fw-bold">Enter search keywords (comma-separated):</label>
            <input type="text" class="form-control" @bind="searchTerms" />
        </div>

        <InputFile OnChange="HandlePdfUpload" multiple accept=".pdf" disabled="@string.IsNullOrWhiteSpace(searchTerms)" />

        @if (!string.IsNullOrWhiteSpace(uploadStatus))
        {
            <p class="text-success">@uploadStatus</p>
        }
    </div>
</div>

@if (AppState.PdfAnalysisResults?.Any() == true)
{
    <h3 class="text-success">PDF Analysis Results</h3>
    <div class="col-md-6">
        @if (AppState.PdfCrossDocLinks?.Any() == true)
        {
            <h3 class="text-primary">Cross-Document Semantic Links</h3>
            <CrossDocLinks Links="AppState.PdfCrossDocLinks" />
        }
    </div>
    <div class="col-md-6">
        @if (!string.IsNullOrWhiteSpace(AppState.PdfKeywordSummary))
        {
            <div class="alert alert-info">
                <strong>AI Summary:</strong><br />
                @AppState.PdfKeywordSummary
            </div>
        }
    </div>
    <div class="row mb-4">
        <div class="col-md-6">
            <PageSentimentChart Results="AppState.PdfAnalysisResults" />
        </div>
        <div class="col-md-6">
            <KeywordSentimentChart Results="AppState.PdfAnalysisResults" />
        </div>
    </div>

    @foreach (var result in AppState.PdfAnalysisResults)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h5>@result.FileName</h5>
                <p>
                    Page Sentiment Score:
                    <span class="badge bg-primary">@result.PageSentimentScore</span>
                </p>

                @if (!string.IsNullOrWhiteSpace(result.KeywordSummary))
                {
                    <div class="alert alert-info">
                        <strong>AI Summary:</strong><br />
                        @AppState.PdfKeywordSummary
                    </div>
                }

                @if (result.KeywordSentimentScores?.Any() == true)
                {
                    <h6>Keyword Sentiments:</h6>
                    <ul>
                        @foreach (var kv in result.KeywordSentimentScores)
                        {
                            <li>
                                <strong>@kv.Key</strong> :
                                <span class="badge bg-success">@kv.Value</span>
                            </li>
                        }
                    </ul>
                }

                @if (result.KeywordFrequencies?.Count > 0)
                {
                    <KeywordChart Frequencies="@result.KeywordFrequencies" />
                }
            </div>
        </div>
    }
}

@code {
    private string? uploadStatus;
    private string searchTerms = string.Empty;

    private Timer? _pollingTimer;
    private List<string> uploadedFileNames = new();

    private async Task HandlePdfUpload(InputFileChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchTerms))
        {
            uploadStatus = "Please provide keywords and upload at least one PDF.";
            return;
        }

        var form = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles())
        {
            var stream = file.OpenReadStream(1_073_741_824); // 1GB limit
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            uploadedFileNames.Add(file.Name);
            form.Add(content: fileContent, name: "files", fileName: file.Name);
        }

        form.Add(new StringContent(searchTerms), "keywords");

        try
        {
            string apiUrl = Navigation.BaseUri + "api/pdf/analyze";
            var response = await Http.PostAsync(apiUrl, form);
            Console.WriteLine($"Called: {apiUrl}");
            if (response.IsSuccessStatusCode)
            {
                uploadStatus = "PDFs uploaded and queued for background processing.";
                StartPolling();
            }
            else
            {
                uploadStatus = $"Upload failed: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error: {ex.Message}";
        }
    }

    private void StartPolling()
    {
        _pollingTimer = new Timer(10000); // every 10 seconds
        _pollingTimer.Elapsed += async (sender, args) =>
        {
            await InvokeAsync(PollForResults);
        };
        _pollingTimer.AutoReset = true;
        _pollingTimer.Enabled = true;
    }

    private async Task PollForResults()
    {
        try
        {
            var results = await Http.GetFromJsonAsync<List<AnalysisResult>>(Navigation.BaseUri + "api/pdf/results");

            // Generate and store summary
            var summary = await SummaryService.GenerateSummaryAsync(results);
            AppState.SetPdfKeywordSummary(summary);

            if (results is { Count: > 0 })
            {
                var resultNames = results.Select(r => r.FileName).ToHashSet(StringComparer.OrdinalIgnoreCase);
                var allReceived = uploadedFileNames.All(name => resultNames.Contains(name));

                if (allReceived)
                {
                    if (!AppState.PdfAnalysisResults.SequenceEqual(results, new AnalysisResultComparer()))
                    {
                        AppState.SetPdfResults(results);
                        uploadStatus = "All PDF analyses complete.";
                    }


                    if (results.Count > 1)
                    {
                        var docs = results.Select(r => new AnalyzedDocument(
                            r.FileName,
                            Chunker.ChunkText(r.RawText)
                                .Select(t => new DocumentChunk(r.FileName, t))
                                .ToList())).ToList();
                        var set = new DocumentSet(docs);
                        var analysis = await RagAnalyzer.AnalyzeAsync(set);
                        AppState.SetPdfCrossDocLinks(analysis.Links.ToList());
                    }

                    var combined = await CombinedLinkService.ComputeLinksAsync(
                        AppState.UrlAnalysisResults,
                        results);
                    AppState.SetAllCrossDocLinks(combined);

                    _pollingTimer?.Stop();
                    _pollingTimer?.Dispose();
                    _pollingTimer = null;
                    uploadedFileNames.Clear();

                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error retrieving results: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        _pollingTimer?.Stop();
        _pollingTimer?.Dispose();
    }
}
