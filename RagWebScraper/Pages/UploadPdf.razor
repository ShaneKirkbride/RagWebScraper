@page "/upload-pdf"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AppStateService AppState
@inject KeywordSentimentSummaryService SummaryService
@inject IServiceProvider ServiceProvider
@inject IRagAnalyzerService RagAnalyzer

@implements IDisposable
@using System.Timers
@using RagWebScraper.Models
@using RagWebScraper.Services
@using RagWebScraper.Shared
@using Microsoft.AspNetCore.Components.Forms

<h3 class="mb-3 text-primary">Upload and Analyze PDFs</h3>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label fw-bold">Enter search keywords (comma-separated):</label>
            <input type="text" class="form-control" @bind="searchTerms" />
        </div>

        <InputFile OnChange="HandlePdfUpload" multiple accept=".pdf" disabled="@string.IsNullOrWhiteSpace(searchTerms)" />

        @if (!string.IsNullOrWhiteSpace(uploadStatus))
        {
            <p class="text-success">@uploadStatus</p>
        }
    </div>
</div>

@if (AppState.PdfAnalysisResults?.Any() == true)
{
    <h3 class="text-success">PDF Analysis Results</h3>
    <div class="col-md-6">
        @if (!string.IsNullOrWhiteSpace(AppState.PdfKeywordSummary))
        {
            <div class="alert alert-info">
                <strong>AI Summary:</strong><br />
                @AppState.PdfKeywordSummary
            </div>
        }
    </div>

    @if (AppState.PdfCrossDocLinks?.Any() == true)
    {
        <h3 class="text-primary">Cross-Document Semantic Links</h3>
        <CrossDocLinks Links="AppState.PdfCrossDocLinks" />
    }

    <div class="row mb-4">
        <div class="col-md-6">
            <PageSentimentChart Results="GetAnalysisResults()" />
        </div>
        <div class="col-md-6">
            <KeywordSentimentChart Results="GetAnalysisResults()" />
        </div>
    </div>

    @foreach (var summary in AppState.PdfAnalysisResults)
    {
        <div class="card mb-3">
            <div class="card-body">
                <h5>@summary.FileName</h5>
                <p>
                    Page Sentiment Score:
                    <span class="badge bg-primary">@summary.Sentiment</span>
                </p>

                @if (summary.KeywordSentiments?.Any() == true)
                {
                    <h6>Keyword Sentiments:</h6>
                    <ul>
                        @foreach (var kv in summary.KeywordSentiments)
                        {
                            <li>
                                <strong>@kv.Key</strong> :
                                <span class="badge bg-success">@kv.Value</span>
                            </li>
                        }
                    </ul>
                }

                @if (summary.KeywordFrequencies?.Count > 0)
                {
                    <KeywordChart Frequencies="@summary.KeywordFrequencies" />
                }
            </div>
        </div>
    }
}

@code {
    private string? uploadStatus;
    private string searchTerms;

    private Timer? _pollingTimer;
    private List<string> uploadedFileNames = new();

    private async Task HandlePdfUpload(InputFileChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchTerms))
        {
            uploadStatus = "Please provide keywords and upload at least one PDF.";
            return;
        }

        var form = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles())
        {
            var stream = file.OpenReadStream(1_073_741_824); // 1GB limit
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            uploadedFileNames.Add(file.Name);
            form.Add(content: fileContent, name: "files", fileName: file.Name);
        }

        form.Add(new StringContent(searchTerms), "keywords");

        try
        {
            string apiUrl = Navigation.BaseUri + "api/pdf/analyze";
            var response = await Http.PostAsync(apiUrl, form);

            if (response.IsSuccessStatusCode)
            {
                uploadStatus = "PDFs uploaded and queued for background processing.";
                // Optionally: start polling or show spinner here
                uploadedFileNames.Clear();
                form = new MultipartFormDataContent();
            }
            else
            {
                uploadStatus = $"Upload failed: {response.ReasonPhrase}";
            }

        }
        catch (Exception ex)
        {
            uploadStatus = $"Error: {ex.Message}";
        }
    }

    private List<AnalysisResult> GetAnalysisResults() =>
        AppState.PdfAnalysisResults.Select(s => new AnalysisResult(Enumerable.Empty<LinkedPassage>())
            {
                Url = s.FileName,
                PageSentimentScore = s.Sentiment,
                KeywordFrequencies = s.KeywordFrequencies ?? new(),
                KeywordSentimentScores = s.KeywordSentiments ?? new()
            }).ToList();


    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;

        _pollingTimer = new Timer(10000); // every 10 seconds
        _pollingTimer.Elapsed += async (_, _) =>
        {
            await InvokeAsync(PollForResults);
        };
        _pollingTimer.AutoReset = true;
        _pollingTimer.Enabled = true; // ✅ Starts the timer
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        _pollingTimer?.Stop();
        _pollingTimer?.Dispose();
    }

    private async Task PollForResults()
    {
        try
        {
            var results = await Http.GetFromJsonAsync<List<FileSentimentSummary>>(Navigation.BaseUri + "api/pdf/results");

            if (results is { Count: > 0 })
            {
                var resultNames = results.Select(r => r.FileName).ToHashSet(StringComparer.OrdinalIgnoreCase);
                var allReceived = uploadedFileNames.All(name => resultNames.Contains(name));

                if (allReceived)
                {
                    // ✅ Prevent repeated updates if results are unchanged
                    if (!AppState.PdfAnalysisResults.SequenceEqual(results, new FileSentimentSummaryComparer()))
                    {
                        AppState.SetPdfResults(results);
                        uploadStatus = "All PDF analyses complete.";
                    }

                    _pollingTimer?.Stop();
                    _pollingTimer?.Dispose();
                    _pollingTimer = null;
                    uploadedFileNames.Clear();

                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch
        {
            uploadStatus = "Error retrieving results.";
            await InvokeAsync(StateHasChanged);
        }
    }
}
