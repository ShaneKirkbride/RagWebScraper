@page "/knowledge-graph"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AppStateService AppState
@inject IRagAnalyzerService RagAnalyzer
@inject KeywordSentimentSummaryService SummaryService

@implements IDisposable
@using System.Timers
@using RagWebScraper.Models
@using RagWebScraper.Services
@using RagWebScraper.Shared
@using Microsoft.AspNetCore.Components.Forms

<h3 class="mb-3 text-primary">Knowledge Graph from PDFs</h3>

<InputFile OnChange="HandleMultipleFiles" multiple accept=".pdf" />

@if (!string.IsNullOrEmpty(uploadStatus))
{
    <div class="alert alert-info mt-2">@uploadStatus</div>
}

@if (graphResults.Any())
{
    @foreach (var graph in graphResults)
    {
        <div class="card shadow-sm mt-4">
            <div class="card-header fw-bold bg-light">@graph.FileName</div>
            <div class="card-body">
                <h5>Entities</h5>
                <ul>
                    @foreach (var node in graph.Result.Nodes)
                    {
                        <li><strong>@node.Label</strong> (@node.Type)</li>
                    }
                </ul>

                <h5>Relationships</h5>
                <ul>
                    @foreach (var edge in graph.Result.Edges)
                    {
                        <li>@edge.SourceId -- @edge.Relation --> @edge.TargetId</li>
                    }
                </ul>
            </div>
        </div>
    }
}

@code {
    private string uploadStatus;
    private List<string> uploadedFileNames = new();
    private List<(string FileName, EntityGraphResult Result)> graphResults = new();
    private Timer? _pollingTimer;

    private async Task HandleMultipleFiles(InputFileChangeEventArgs e)
    {
        var form = new MultipartFormDataContent();
        uploadedFileNames.Clear();
        graphResults.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            var stream = file.OpenReadStream(1_073_741_824); // 1GB limit
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            uploadedFileNames.Add(file.Name);
            form.Add(content: fileContent, name: "files", fileName: file.Name);
        }

        form.Add(new StringContent("test"), "keywords");

        try
        {
            var apiUrl = new Uri(new Uri(Navigation.BaseUri), "api/pdf/analyze");
            var response = await Http.PostAsync(apiUrl, form);

            if (response.IsSuccessStatusCode)
            {
                uploadStatus = "PDFs uploaded and queued for entity graph processing.";
                StartPolling();
            }
            else
            {

                uploadStatus = $"Upload failed: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error uploading PDFs: {ex.Message}";
        }
    }

    private void StartPolling()
    {
        _pollingTimer = new Timer(10000); // every 10s
        _pollingTimer.Elapsed += async (_, _) =>
        {
            await InvokeAsync(PollForGraphs);
        };
        _pollingTimer.AutoReset = true;
        _pollingTimer.Enabled = true;
    }

    private async Task PollForGraphs()
    {
        try
        {
            var results = await Http.GetFromJsonAsync<List<AnalysisResult>>(Navigation.BaseUri + "api/pdf/results");
            var resultNames = results.Select(r => r.FileName).ToHashSet(StringComparer.OrdinalIgnoreCase);

            // Generate and store summary
            var summary = await SummaryService.GenerateSummaryAsync(results);
            AppState.SetPdfKeywordSummary(summary);

            foreach (var fileName in uploadedFileNames)
            {
                if (!resultNames.Contains(fileName) || graphResults.Any(r => r.FileName == fileName))
                    continue;

                var response = await Http.PostAsJsonAsync(Navigation.BaseUri + "api/KnowledgeGraph/analyze-pdf", fileName);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<EntityGraphResult>();
                    graphResults.Add((fileName, result));
                }
            }

            if (uploadedFileNames.All(f => graphResults.Any(g => g.FileName == f)))
            {
                uploadStatus = "All graphs generated.";
                _pollingTimer?.Stop();
                _pollingTimer?.Dispose();
                _pollingTimer = null;
                uploadedFileNames.Clear();
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            uploadStatus = $"Error polling for graphs: {ex.Message}";
        }
    }

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
        _pollingTimer?.Stop();
        _pollingTimer?.Dispose();
    }
}